import numpy as np
import matplotlib.pyplot as plt

def sigmoid(x):
    return 1.0 / (1.0 + np.exp(-x))


data_set = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  # 4*2
label_set = np.array([[0], [1], [1], [0]])  # 4*1

theta0 = np.random.rand(3, 2)  # 3*2
theta1 = np.random.rand(3, 1)  # 3*1

Loss = []
alpha = 0.1
J = []
# def rand_initialize_weights(L_in, L_out, epsilon):
#     epsilon_init = epsilon
#     W = np.random.rand(L_out, 1 + L_in) * 2 * epsilon_init - epsilon_init
#     return W


def back_propagation(weight0, weight1, data, label):
    for i in range(2500):
        h_total = np.zeros((4, 1))
        for j in range(data.shape[0]):

            # The first layer

            x_raw = np.array([data[j]])
            x = np.vstack((np.array([1]), x_raw.T))  # Add the bias 1
            y0 = np.dot(x.T, weight0)  # Apply the linear combination
            y0_act = sigmoid(y0)  # Apply the sigmoid function

            # The first layer

            y1_raw = np.array(y0_act)
            y1_bias = np.vstack((np.array([1]), y1_raw.T))  # Add the bias 1
            y1 = np.dot(y1_bias.T, weight1)  # Apply the linear combination
            y1_act = sigmoid(y1)  # Apply the sigmoid function

            # Calculate the error and loss

            h_total[j, 0] = y1_act
            error = y1_act - label[j]
            loss = 0.5 * error * error

            Loss.append(loss[0,0])

            # Apply back Propagation: apply gradient descend algorithm to update the weights

            delta1 = error * y1_act * (1 - y1_act)  # 1*1
            delta0 = delta1 * weight1[1:,:] * y1_raw.T * (1 - y1_raw).T

            weight1 -= alpha * delta1 * y1_bias
            weight0 -= alpha * (delta0 * np.vstack((x.T, x.T))).T
        J.append((1.0 / 4) * np.sum(-label * np.log(h_total) - (np.array([[1]]) - label) * np.log(1 - h_total)))


back_propagation(theta0, theta1, data_set, label_set)

y = Loss
Y0 = []
Y1 = []
Y2 = []
Y3 = []
x = []
x_delta = 1
for i in range(10000):
    if i % 4 == 0:
        Y0.append(y[i])
    elif i % 4 == 1:
        Y1.append(y[i])
    elif i % 4 == 2:
        Y2.append(y[i])
    elif i % 4 == 3:
        Y3.append(y[i])
for i in range(2500):
    x.append(i)

plt.figure(1)
plt.subplot(2, 2, 1)
plt.plot(x, Y0)
plt.title("With input data [0,0]")

plt.subplot(2, 2, 2)
plt.plot(x, Y1)
plt.title("With input data [0,1]")

plt.subplot(2, 2, 3)
plt.plot(x, Y2)
plt.title("With input data [1,0]")

plt.subplot(2, 2, 4)
plt.plot(x, Y3)
plt.title("With input data [1,1]")

plt.figure(2)
plt.plot(x, J)
plt.show()

print("-------------------")
print("theta0 is: ")
print(theta0)
print("-------------------")
print("theta1 is: ")
print(theta1)